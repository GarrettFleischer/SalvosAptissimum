note
	description: "Main window for this application"
	author: "Generated by the New Vision2 Application Wizard."
	date: "$Date: 2016/5/23 22:27:9 $"
	revision: "1.0.0"

class
	MAIN_WINDOW

inherit

	EV_TITLED_WINDOW
		redefine
			create_interface_objects,
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create,
			copy
		end

	INET_PROPERTIES
		undefine
			default_create,
			copy
		end

create
	default_create

create
	make

	-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- Constants

	Window_title: STRING = "Salvos Aptissimum Server"
			-- Title of the window.

	Window_width: INTEGER = 1280
			-- Initial width for this window.

	Window_height: INTEGER = 720
			-- Initial height for this window.

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- Members

	standard_menu_bar: EV_MENU_BAR
			-- Standard menu bar for this window.

	file_menu: EV_MENU
			-- "File" menu for this window (contains New, Open, Close, Exit...)

	help_menu: EV_MENU
			-- "Help" menu for this window (contains About...)

	main_container: EV_HORIZONTAL_BOX
			-- Main container (contains all widgets displayed in this window).

	log_window: EV_RICH_TEXT
			-- Log window

	command_window: EV_TEXT_FIELD
			-- Command text box

	map_window: EV_RICH_TEXT
			-- Map window

	maximum_clients: INTEGER = 100
			-- Value to set on the socket for the number of clients accepted

	clients: ARRAYED_LIST [ANIMAL]

	commands: ARRAYED_LIST [COMMAND]

	send_mutex: MUTEX

	log_mutex: MUTEX

	map: MAP

	start_time: DATE_TIME

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- Initialization

		--	default_create
		--		do
		--			Precursor {EV_TITLED_WINDOW}
		--			make (12111, false, 0)
		--		end

	make (port: INTEGER prefer_ipv4_stack: BOOLEAN accept_timeout: INTEGER)
		local
			listen_socket: NETWORK_STREAM_SOCKET
			l_address: detachable NETWORK_SOCKET_ADDRESS
			main_thread: WORKER_THREAD
			server_thread: WORKER_THREAD
		do
				-- Setup Window
			default_create

				-- Setup Server
			if prefer_ipv4_stack then
				set_ipv4_stack_preferred (True)
			end

				-- Create the Server socket
			log_message ("Create socket")
			create listen_socket.make_server_by_port (port)
			if not listen_socket.is_bound then
				log_message ("Unable bind to port " + port.out)
			else
				l_address := listen_socket.address
				check
					l_address_attached: l_address /= Void
				end
				listen_socket.listen (maximum_clients)
					-- Set the accept timeout
				listen_socket.set_accept_timeout (accept_timeout)

					-- fill map
				map.fill_random

					-- launch server thread
				log_message ("Launching server thread")
				create server_thread.make (agent perform_accept_serve_loop(listen_socket))
				create main_thread.make (agent update_loop)
				server_thread.launch
				main_thread.launch
			end
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	create_interface_objects
			-- <Precursor>
		do
				-- Initialize start time
			create start_time.make_now

				-- Create main container & components.
			create main_container
			create log_window
			create command_window
			create map_window

				-- Create the menu bar.
			create standard_menu_bar
				-- Create file menu.
			create file_menu.make_with_text (Menu_file_item)
				-- Create help menu.
			create help_menu.make_with_text (Menu_help_item)

				-- Create a status bar and a status label.
			create standard_status_bar
			create standard_status_label.make_with_text ("Add your status text here...")

				-- create map
			create map.make_with_size (100, 100)

				-- create clients and commands lists
			create clients.make (0)
			create commands.make (0)

				-- create mutexes
			create send_mutex.make
			create log_mutex.make
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

				-- Create and add the menu bar.
			build_standard_menu_bar
			set_menu_bar (standard_menu_bar)

				-- Create and add the status bar.
			build_standard_status_bar
			lower_bar.extend (standard_status_bar)
			build_main_container
			extend (main_container)

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window.
			set_title (Window_title)

				-- Set the initial size of the window.
			set_size (Window_width, Window_height)
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	is_in_default_state: BOOLEAN
			-- Is the window in its default state?
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then (height = Window_height) and then (title.is_equal (Window_title))
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- Server Implementation

	update_loop
		local
			done: BOOLEAN
			now, prev: DATE_TIME
			delta: DATE_TIME_DURATION
		do
			create prev.make_now
			from
				done := False
			until
				done
			loop
					-- update current time and calculate delta
				create now.make_now
				delta := now.definite_duration (prev)

					-- update once per half second
				if (delta.fine_seconds_count > 0.5) then
						-- update previous time
					create prev.make_now

						-- animals
					process_animals

						-- commands
					process_commands
				end
			end
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	process_animals
		local
			i: INTEGER
			destroyed: like clients
			animal: ANIMAL
			cell: MAP_CELL
		do
				-- reset destroyed
			create destroyed.make (0)

				-- Perform update and determine which animals need destroyed
			from
				i := 1
			until
				i = clients.count + 1
			loop
				if (clients [i].needs_destroyed) then
					destroyed.extend (clients [i])
					i := clients.count + 1
				else
					clients [i].update
					i := i + 1
				end
			end

				-- Perform removal afterwards to prevent invalid indexing while looping through client_list
			from
				i := 1
			until
				i = destroyed.count + 1
			loop
				animal := destroyed [i]
				cell := map.cell_with (animal)
				send_reply (animal.get_socket, {SERVER_COMMANDS}.quit, "")
				if (cell.get_animals.has (animal)) then
					cell.remove_animal (animal)
				end
				clients.prune_all (animal)
				i := i + 1
			end
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	process_commands
		local
			i: INTEGER
			finished_commands: like commands
		do
			create finished_commands.make (0)

				-- execute commands and find finished
			from
				i := 1
			until
				i = commands.count + 1
			loop
				commands [i].execute
				if (commands [i].is_finished) then
					finished_commands.extend (commands [i])
				end
				i := i + 1
			end

				-- remove finished commands
			from
				i := 1
			until
				i = finished_commands.count + 1
			loop
				commands.prune_all (finished_commands [i])
				i := i + 1
			end
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	perform_accept_serve_loop (socket: NETWORK_STREAM_SOCKET)
		require
			valid_socket: socket /= Void and then socket.is_bound
		local
			done: BOOLEAN
			client_socket: detachable NETWORK_STREAM_SOCKET
			client_thread: WORKER_THREAD
			rand: RANDOM
			rand_anim: INTEGER_64
			time: DATE_TIME
			animal: ANIMAL
			factory: ANIMAL_FACTORY
		do
			from
				done := False
			until
				done
			loop
				socket.accept
				client_socket := socket.accepted
				if client_socket = Void then
					log_message ("Error accepting client!")
				else
						-- Init locals
					log_message ("Client connected.")
					create time.make_now
					create rand.make
					create factory

						-- Spawn random animal
					rand.set_seed ((time.definite_duration (start_time)).seconds_count.as_integer_32)
					rand_anim := (rand.double_i_th ((time.definite_duration (start_time)).seconds_count.as_integer_32) * 3).floor
					if (rand_anim = 0) then
						animal := factory.make_animal ("rabbit", client_socket)
					elseif (rand_anim = 1) then
						animal := factory.make_animal ("fox", client_socket)
					else
						animal := factory.make_animal ("badger", client_socket)
					end
					clients.extend (animal)
					map [50, 49].add_animal (animal)

						-- Launch client thread
					create client_thread.make (agent perform_client_communication(animal))
					client_thread.launch
				end
				done := (clients.count >= maximum_clients)
			end
			log_message ("Maximum clients reached")
			socket.close
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	perform_client_communication (animal: ANIMAL)
		require
			animal_attached: animal /= Void
			animal_valid: animal.get_socket.is_open_read and then animal.get_socket.is_open_write
		local
			done: BOOLEAN
			l_address, l_peer_address: detachable NETWORK_SOCKET_ADDRESS
		do
			l_address := animal.get_socket.address
			l_peer_address := animal.get_socket.peer_address
			check
				l_address_attached: l_address /= Void
				l_peer_address_attached: l_peer_address /= Void
			end
			send_reply (animal.get_socket, {SERVER_COMMANDS}.log, "You are a " + animal.get_name + ".")
			add_command (create {LOOK_COMMAND}.make (animal, map, agent send_reply))
			from
				done := False
			until
				done
			loop
				done := receive_message_and_send_reply (animal)
			end
			log_message ("Client disconnected")
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	receive_message_and_send_reply (animal: ANIMAL): BOOLEAN
		require
			animal_attached: animal /= Void
			animal_valid: animal.get_socket.is_open_read and then animal.get_socket.is_open_write
		local
			message: detachable STRING
			command: COMMAND
		do
			animal.get_socket.read_line
			message := animal.get_socket.last_string
			if message /= Void then
					-- Fix line endings
				if message.ends_with ("%R") then
					message.keep_head (message.count - 1)
				end
					-- Quit command
				if message.is_case_insensitive_equal ("quit") then
					animal.destroy_later
					Result := True

						-- Say command
				elseif (message.starts_with ("say ")) then
					message.keep_tail (message.count - 4)
					command := create {SAY_COMMAND}.make (animal, map, message, agent send_reply)
					add_command (command)

						-- Eat command
				elseif (message.starts_with ("eat ")) then
					message.keep_tail (message.count - 4)
						-- TODO add eat command

				elseif (message.starts_with ("look")) then
					command := create {LOOK_COMMAND}.make (animal, map, agent send_reply)
					add_command (command)

						-- Move commands
				elseif (message.is_case_insensitive_equal ("n") or message.is_case_insensitive_equal ("s") or message.is_case_insensitive_equal ("e") or message.is_case_insensitive_equal ("w")) then
					if (not animal.is_moving) then -- only queue up command if animal is not moving
						message.to_lower
						command := create {MOVE_COMMAND}.make (animal, map, message [1], false, agent send_reply)
						add_command (command)
					end
				elseif (message.starts_with ("run ")) then
					if (not animal.is_moving) then -- only queue up command if animal is not moving
						message.keep_tail (message.count - 4)
						message.to_lower
						command := create {MOVE_COMMAND}.make (animal, map, message [1], true, agent send_reply)
						add_command (command)
					end

					-- Invalid command
				else
					send_reply (animal.get_socket, {SERVER_COMMANDS}.log, "you attempt to %"" + message + "%" but fail miserably...")
				end
			end
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	add_command (command: COMMAND)
		do
			send_mutex.lock
			commands.extend (command)
			send_mutex.unlock
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	send_reply (client_socket: NETWORK_STREAM_SOCKET; server_command: STRING; message: STRING)
		require
			message_attached: message /= Void
		do
				-- Perform double check locking
			if (not client_socket.is_closed and client_socket.is_open_write) then
				send_mutex.lock
				if (not client_socket.is_closed and client_socket.is_open_write) then
					client_socket.put_string ({SERVER_COMMANDS}.log + "%N" + server_command + message + "%N")
				end
				send_mutex.unlock
			end
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- Menu Implementation

	build_standard_menu_bar
			-- Create and populate `standard_menu_bar'.
		do
				-- Add the "File" menu.
			build_file_menu
			standard_menu_bar.extend (file_menu)
				-- Add the "Help" menu.
			build_help_menu
			standard_menu_bar.extend (help_menu)
		ensure
			menu_bar_initialized: not standard_menu_bar.is_empty
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	build_file_menu
			-- Create and populate `file_menu'.
		local
			menu_item: EV_MENU_ITEM
		do
			create menu_item.make_with_text (Menu_file_new_item)
				--| TODO: Add the action associated with "New" here.
			file_menu.extend (menu_item)
			create menu_item.make_with_text (Menu_file_open_item)
				--| TODO: Add the action associated with "Open" here.
			file_menu.extend (menu_item)
			create menu_item.make_with_text (Menu_file_save_item)
				--| TODO: Add the action associated with "Save" here.
			file_menu.extend (menu_item)
			create menu_item.make_with_text (Menu_file_saveas_item)
				--| TODO: Add the action associated with "Save As..." here.
			file_menu.extend (menu_item)
			create menu_item.make_with_text (Menu_file_close_item)
				--| TODO: Add the action associated with "Close" here.
			file_menu.extend (menu_item)
			file_menu.extend (create {EV_MENU_SEPARATOR})

				-- Create the File/Exit menu item and make it call
				-- `request_close_window' when it is selected.
			create menu_item.make_with_text (Menu_file_exit_item)
			menu_item.select_actions.extend (agent request_close_window)
			file_menu.extend (menu_item)
		ensure
			file_menu_initialized: not file_menu.is_empty
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	build_help_menu
			-- Create and populate `help_menu'.
		local
			menu_item: EV_MENU_ITEM
		do
			create menu_item.make_with_text (Menu_help_contents_item)
				--| TODO: Add the action associated with "Contents and Index" here.
			help_menu.extend (menu_item)
			create menu_item.make_with_text (Menu_help_about_item)
			menu_item.select_actions.extend (agent on_about)
			help_menu.extend (menu_item)
		ensure
			help_menu_initialized: not help_menu.is_empty
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- StatusBar Implementation

	standard_status_bar: EV_STATUS_BAR
			-- Standard status bar for this window

	standard_status_label: EV_LABEL
			-- Label situated in the standard status bar.
			--
			-- Note: Call `standard_status_label.set_text (...)' to change the text
			--       displayed in the status bar.

	build_standard_status_bar
			-- Populate the standard toolbar.
		do
				-- Initialize the status bar.
			standard_status_bar.set_border_width (2)

				-- Populate the status bar.
			standard_status_label.align_text_left
			standard_status_bar.extend (standard_status_label)
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- About Dialog Implementation

	on_about
			-- Display the About dialog.
		local
			about_dialog: ABOUT_DIALOG
		do
			create about_dialog
			about_dialog.show_modal_to_window (Current)
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- Implementation, Close event

	request_close_window
			-- Process user request to close the window.
		local
			question_dialog: EV_CONFIRMATION_DIALOG
			i: INTEGER
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)
			if question_dialog.selected_button ~ (create {EV_DIALOG_CONSTANTS}).ev_ok then
				from
					i := 1
				until
					i = clients.count + 1
				loop
					send_reply (clients [i].get_socket, {SERVER_COMMANDS}.quit, "")
					i := i + 1
				end

					-- Destroy the window.
				destroy

					-- End the application.
					--| TODO: Remove next instruction if you don't want the application
					--|       to end when the first window is closed..
				if attached (create {EV_ENVIRONMENT}).application as a then
					a.destroy
				end
			end
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

feature {NONE} -- Implementation

	build_main_container
			-- Populate `main_container'.
		local
			log_command_container: EV_VERTICAL_BOX
			map_container: EV_VERTICAL_BOX
			hsep_log_command: EV_HORIZONTAL_SEPARATOR
			vsep_log_map: EV_VERTICAL_SEPARATOR
		do
				-- Create locals
			create log_command_container
			create map_container
			create hsep_log_command
			create vsep_log_map

				-- Dissallow editing in log_window & map_window
			log_window.disable_edit
			map_window.disable_edit

				-- Set minimum size on map_window & main_container
			map_window.set_minimum_size (250, 200)
			main_container.set_minimum_size (640, 480)

				-- Add log_window & command_window to log_command_container
			log_command_container.extend (log_window)
			log_command_container.extend (hsep_log_command)
			log_command_container.extend (command_window)
			log_command_container.disable_item_expand (hsep_log_command)
			log_command_container.disable_item_expand (command_window)

				-- Add map_window to map_container
			map_container.extend (map_window)
			map_container.disable_item_expand (map_window)

				-- Add containers to main_container
			main_container.extend (log_command_container)
			main_container.extend (vsep_log_map)
			main_container.extend (map_container)
			main_container.disable_item_expand (vsep_log_map)
			main_container.disable_item_expand (map_container)

				-- Connect agents
			command_window.key_press_actions.extend (agent command_key_pressed)
		ensure
			main_container_has_log: main_container.has_recursive (log_window)
			main_container_has_command: main_container.has_recursive (command_window)
			main_container_has_map: main_container.has_recursive (map_window)
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	command_key_pressed (key: EV_KEY)
		do
			if key.code = {EV_KEY_CONSTANTS}.key_enter then
				log_message (command_window.text)
				command_window.set_text ("")
			end
		end

		-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	log_message (msg: STRING)
			-- Append message to prim_log
		require
			log_exists: log_window /= Void
		do
			log_mutex.lock
			if (not log_window.text.is_empty) then
				log_window.append_text ("%N")
			end
			log_window.append_text (msg)
			log_window.scroll_to_end
			log_mutex.unlock
		ensure
			text_appended: log_window.text.ends_with (msg)
		end

end
